diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/bitfield.h.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/bitfield.h
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/bitfield.h.4~	2022-03-09 00:39:31.777924104 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/bitfield.h	2022-03-09 00:39:31.777924104 +0100
@@ -0,0 +1,33 @@
+/* BitField class that, unlike std::bitset, works with
+ * C style input (memset/memcpy/...), and therefore with
+ * ioctl output without conversions
+ *
+ * (C) 2020 Bernhard Rosenkränzer <bero@lindev.ch>
+ *
+ * Released under the GPLv3
+ */
+
+#pragma once
+
+#include <cstdint>
+#include <cstring>
+
+template<size_t s> class BitField {
+public:
+	BitField() { memset(data, 0, sizeof(data)); }
+	operator void*() { return static_cast<void*>(&data); }
+	bool isSet(int bit) const {
+		return (data[(bit/8)]>>(bit%8))&1;
+	}
+	void set(int bit) {
+		data[(bit/8)] |= 1<<(bit%8);
+	}
+	void clear(int bit) {
+		data[(bit/8)] &= ~(1<<(bit%8));
+	}
+	bool operator[](int bit) const {
+		return isSet(bit);
+	}
+private:
+	uint8_t data[1+s/8];
+};
diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.cpp.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.cpp
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.cpp.4~	2022-03-09 00:39:31.777924104 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.cpp	2022-03-09 00:39:31.777924104 +0100
@@ -0,0 +1,126 @@
+/* Class to drive the PinePhone (and similar) vibrator
+ *
+ * (C) 2020 Bernhard Rosenkränzer <bero@lindev.ch>
+ *
+ * Released under the GPLv3
+ */
+
+#include "hapticfeedback.h"
+#include "bitfield.h"
+
+#include <QDir>
+#include <QFile>
+#include <iostream>
+
+extern "C" {
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include <unistd.h>
+}
+
+HapticFeedback::HapticFeedback(QString const &device) {
+	_dbg=fopen("/tmp/haptic.log", "a+");
+	BitField<FF_MAX> ffFeatures;
+	if(device.isEmpty()) {
+		// Locate the vibrator -- it'll typically be the first
+		// device that supports the force feedback API and doesn't
+		// look like a joystick/gamepad.
+		QDir devinput(QString::fromLatin1("/dev/input"));
+		for(QString const &dev : devinput.entryList(QStringList() << QString::fromLatin1("event*"), QDir::Readable|QDir::Writable|QDir::System|QDir::NoDotAndDotDot)) {
+			QString d(QString::fromLatin1("/dev/input/") + dev);
+			_fd = open(QFile::encodeName(d).data(), O_RDWR);
+			if(_fd < 0) {
+				// If we can't open it, can't be the device
+				continue;
+			}
+
+			fprintf(_dbg, "Probing %s\n", qPrintable(d)); fflush(_dbg);
+			int effects;
+			if(ioctl(_fd, EVIOCGEFFECTS, &effects) < 0) {
+				perror("EVIOCGEFFECTS");
+				close(_fd);
+				continue;
+			}
+			if(effects <= 0)
+				continue;
+
+			if(ioctl(_fd, EVIOCGBIT(EV_FF, sizeof(ffFeatures)), &ffFeatures) < 0) {
+				perror("EV_FF");
+				close(_fd);
+				continue;
+			}
+			if(ffFeatures.isSet(FF_AUTOCENTER)) {
+				fprintf(_dbg, "Has autocenter\n"); fflush(_dbg);
+				// Looks like a joystick -- a vibrator
+				// doesn't really have a center...
+				close(_fd);
+				continue;
+			}
+			if(!ffFeatures.isSet(FF_RUMBLE)) {
+				fprintf(_dbg, "Doesn't have rumble\n"); fflush(_dbg);
+				// Doesn't support the mode we use (for now)
+				// let's see if there's another device that does...
+				close(_fd);
+				continue;
+			}
+			break;
+		}
+	} else {
+		_fd = open(QFile::encodeName(device).data(), O_RDWR);
+		if(ioctl(_fd, EVIOCGBIT(EV_FF, sizeof(ffFeatures)), &ffFeatures) < 0) {
+			perror("EV_FF");
+			close(_fd);
+			return;
+		}
+	}
+
+	if(_fd < 0)
+		return;
+
+	if(ffFeatures.isSet(FF_GAIN)) {
+		// set gain to 75%
+		input_event gain;
+		memset(&gain, 0, sizeof(gain));
+		gain.type = EV_FF;
+		gain.code = FF_GAIN;
+		gain.value = 0xc000;
+		if(write(_fd, &gain, sizeof(gain)) != sizeof(gain))
+			perror("Set gain"); // Probably not fatal...
+	}
+
+	memset(&_effect, 0, sizeof(_effect));
+	_effect[0].type = FF_RUMBLE;
+	_effect[0].id = -1;
+	_effect[0].u.rumble.strong_magnitude = 0xffff;
+	_effect[0].u.rumble.weak_magnitude = 0x0;
+	_effect[0].replay.length = 100;
+	_effect[0].replay.delay = 0;
+	if(ioctl(_fd, EVIOCSFF, &_effect[0]) < 0) {
+		fprintf(_dbg, "EVIOCSFF: %s\n", strerror(errno)); fflush(_dbg);
+	}
+
+	sendCmd(true);
+}
+
+bool HapticFeedback::sendCmd(bool start) {
+	fprintf(_dbg, "Sending %u to %u\n", start, _fd); fflush(_dbg);
+
+	input_event cmd;
+	memset(&cmd, 0, sizeof(input_event));
+	cmd.type = EV_FF;
+	cmd.code = _effect[0].id;
+	cmd.value = start ? 1 : 0;
+	bool ok = write(_fd, &cmd, sizeof(cmd)) == sizeof(cmd);
+	if(!ok) {
+		fprintf(_dbg, "EV_FF: %s\n", strerror(errno)); fflush(_dbg);
+	}
+	return ok;
+}
+
+void HapticFeedback::start() {
+	sendCmd(true);
+}
+
+void HapticFeedback::stop() {
+	sendCmd(false);
+}
diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.h.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.h
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.h.4~	2022-03-09 00:39:31.777924104 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/hapticfeedback.h	2022-03-09 00:39:31.777924104 +0100
@@ -0,0 +1,30 @@
+/**
+ * Haptic feedback for devices supporting the
+ * evdev force feedback feature
+ * (C) 2020 Bernhard Rosenkränzer <bero@lindev.ch>
+ * Released under the GPLv3
+ */
+#pragma once
+
+#include <QString>
+
+extern "C" {
+#include <linux/input.h>
+#include <unistd.h>
+}
+
+class HapticFeedback {
+public:
+	HapticFeedback(QString const &device=QString());
+	~HapticFeedback() { if (_fd >= 0) close(_fd); }
+	bool isOk() const { return _fd >= 0; }
+public:
+	void start();
+	void stop();
+private:
+	bool sendCmd(bool start);
+private:
+	int _fd;
+	ff_effect _effect[1];
+	FILE *_dbg;
+};
diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.cpp.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.cpp
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.cpp.4~	2022-03-09 00:39:31.767924374 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.cpp	2022-03-09 00:40:27.083433659 +0100
@@ -38,6 +38,8 @@
 #include <QTimerEvent>
 #include <QtCore/private/qobject_p.h>
 
+#include "hapticfeedback.h"
+
 QT_BEGIN_NAMESPACE
 using namespace QtVirtualKeyboard;
 
@@ -225,6 +227,7 @@ bool QVirtualKeyboardInputEngine::virtua
 
     bool accept = false;
     if (d->activeKey == Qt::Key_unknown || d->activeKey == key) {
+        if(hf.isOk()) hf.start();
         d->activeKey = key;
         d->activeKeyText = text;
         d->activeKeyModifiers = modifiers;
@@ -718,6 +721,7 @@ void QVirtualKeyboardInputEngine::timerE
     if (timerEvent->timerId() == d->repeatTimer) {
         d->virtualKeyClick(d->activeKey, d->activeKeyText, d->activeKeyModifiers, true);
         if (!d->repeatCount) {
+            if(hf.isOk()) hf.start();
             killTimer(d->repeatTimer);
             d->repeatTimer = startTimer(50);
         }
diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.h.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.h
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.h.4~	2021-03-18 11:22:28.000000000 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/qvirtualkeyboardinputengine.h	2022-03-09 00:39:31.778924077 +0100
@@ -33,6 +33,7 @@
 #include <QObject>
 #include <QPointer>
 #include <QtVirtualKeyboard/qvirtualkeyboard_global.h>
+#include "hapticfeedback.h"
 
 QT_BEGIN_NAMESPACE
 
@@ -160,6 +161,7 @@ protected:
     void timerEvent(QTimerEvent *timerEvent) override;
 
 private:
+    HapticFeedback hf;
     friend class QVirtualKeyboardInputContext;
     friend class QVirtualKeyboardInputContextPrivate;
 };
diff -up qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/virtualkeyboard.pro.4~ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/virtualkeyboard.pro
--- qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/virtualkeyboard.pro.4~	2021-03-18 11:22:28.000000000 +0100
+++ qtvirtualkeyboard-everywhere-src-5.15.3/src/virtualkeyboard/virtualkeyboard.pro	2022-03-09 00:39:31.778924077 +0100
@@ -13,6 +13,7 @@ DEFINES += QVIRTUALKEYBOARD_LIBRARY
 include(../config.pri)
 
 SOURCES += \
+    hapticfeedback.cpp \
     platforminputcontext.cpp \
     qvirtualkeyboardinputcontext.cpp \
     qvirtualkeyboardinputcontext_p.cpp \
@@ -38,6 +39,8 @@ SOURCES += \
     qvirtualkeyboardextensionplugin.cpp
 
 HEADERS += \
+    bitfield.h \
+    hapticfeedback.h \
     platforminputcontext_p.h \
     qvirtualkeyboardinputcontext.h \
     qvirtualkeyboardinputcontext_p.h \
